{"version":3,"sources":["gameControl/actionTypes.js","constants.js","utils/index.js","gameControl/reducer.js","chessBoard/actionTypes.js","chessBoard/actions.js","utils/controlClients/SocketClient.js","player/actions.js","player/actionTypes.js","utils/boardUtils.js","chessBoard/views/chessItem.js","utils/ai/ai.js","utils/controlClients/AIClient.js","gameControl/views/gamePlaying.js","menu/menuPage.js","menu/RoomMenu.js","gameControl/views/routeControl.js","chessBoard/reducer.js","chessBoard/views/chessBoard.js","player/reducer.js","player/views/playerZone.js","player/views/cardItem.js","player/views/publicZone.js","player/views/gameBoard.js","App.js","Store.js","index.js"],"names":["RESET","UPDATE_SOCKET","ChessTypes","NONE","NORMAL","findChessPos","board","chessId","selectPos","i","length","row","j","id","x","y","createChess","player","chessType","type","createBearFrogBoard","getInitState","players","name","order","local","nowPlayer","chessBoard","selected","selectId","gameControl","socketContainer","this","socketClient","setSocketClient","bind","getSocketClient","s","SELECT","MOVE_TO","SET_BOARD","setBoard","SocketAPI","host","ws","WebSocket","onclose","e","isTrusted","alert","JSON","stringify","onerror","close","data","send","func","onmessage","onopen","gameMessage","isRoundEnd","needMessage","setLocalPlayer","flatten","arr","reduce","pre","val","concat","Array","isArray","getNextPosList","maxX","maxY","gx","gy","moveList","x2","y2","push","judgeCanBeMoveTo","indexOf","doMoveAction","now","newBoard","map","item","temp","typeChangeInfo","reason","isHorizon","ii","allLength","maxAllLength","selfLength","maxSelfLength","selfSize","enemyList","jj","Math","max","doKill","judgeGameOver","orderSequence","flatBoard","playerChessCount","key","gameOver","winners","parseInt","playerCanMoveCount","forEach","overs","Object","keys","console","log","ChessComponent","props","iconClassName","children","className","xmlns","width","height","viewBox","dominantBaseline","textAnchor","style","fontSize","ChessItem","context","state","nextProps","beSelected","canBeMoveTo","onSelect","onMoveTo","canBeSelect","playerNames","icon","onClick","React","Component","connect","AI","getTheMove","moves","one","next","min","ceil","floor","random","getNextBoard","theMove","AIClient","funcs","onMessage","onOpen","store","timeout","clearTimeout","setTimeout","resData","PlayControl","roomId","vsAI","process","SocketClient","setOnOpen","setOnMessage","event","parse","onReceiveBoard","disconnect","preGameOver","getPlayerNames","resetAll","params","ChessBoard","dispatch","setNowPlayer","buttonList","title","url","urlFunc","randomNumber","menuPage","buttonData","Button","raised","history","OnePlayerPanel","playerName","value","readOnly","text","onCopy","onJump","RoomMenu","window","location","href","pathname","urlPrefix","split","outlined","RouteControl","playControl","match","others","qs","search","ignoreQueryPrefix","playerId","hasAI","Switch","Route","path","component","exact","select","moveTo","rowKey","index","PlayerZone","ownProps","active","game","cardPlayed","isShow","onRemove","typeShow","backgroundColor","render","preProps","isNowPlayer","onRemoveCard","isComputer","cards","life","noCard","str","from","nowPlayerName","roundEnd","App","win","reducer","combineReducers","action","newState","nextState","filter","todoItem","storeEnhancers","compose","applyMiddleware","devToolsExtension","f","createStore","ReactDOM","document","getElementById"],"mappings":"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","file":"static/js/main.2cdaac2e.chunk.js","sourcesContent":["export const RESET = 'GAME_CONTROL/RESET';\r\nexport const UPDATE_SOCKET = 'GAME_CONTROL/UPDATE_SOCKET';\r\n","export const ChessTypes = {\r\n  NONE: '无棋',\r\n  NORMAL: '有棋',\r\n};\r\n","/**\r\n * Created by yuiff on 2018/3/31.\r\n */\r\nimport { ChessTypes } from '../constants.js';\r\n\r\nconst findChessPos = (board, chessId) => {\r\n  let selectPos = {};\r\n  for (let i = 0; i < board.length; i++) {\r\n    const row = board[i];\r\n    for (let j = 0; j < row.length; j++) {\r\n      // console.log(typeof(i), typeof(j));\r\n      const item = row[j];\r\n      if (item.id === chessId) {\r\n        selectPos = {\r\n          x: i,\r\n          y: j,\r\n        };\r\n        break;\r\n      }\r\n    }\r\n  }\r\n  // console.log(selectPos, chessId, board, typeof(selectPos.x), typeof(selectPos.y));\r\n  return selectPos;\r\n};\r\n\r\nlet chessId = 0;\r\nconst createChess = (player, chessType) => ({\r\n  id: chessId++,\r\n  player,\r\n  type: chessType,\r\n});\r\n\r\nconst createBearFrogBoard = () => {\r\n  const board = [\r\n    [createChess(1, ChessTypes.NORMAL), createChess(1, ChessTypes.NORMAL), createChess(1, ChessTypes.NORMAL), createChess(1, ChessTypes.NORMAL)],\r\n    [createChess(1, ChessTypes.NORMAL), createChess(null, ChessTypes.NONE), createChess(null, ChessTypes.NONE), createChess(1, ChessTypes.NORMAL)],\r\n    [createChess(0, ChessTypes.NORMAL), createChess(null, ChessTypes.NONE), createChess(null, ChessTypes.NONE), createChess(0, ChessTypes.NORMAL)],\r\n    [createChess(0, ChessTypes.NORMAL), createChess(0, ChessTypes.NORMAL), createChess(0, ChessTypes.NORMAL), createChess(0, ChessTypes.NORMAL)],\r\n  ];\r\n  return board;\r\n};\r\n\r\nconst getInitState = () => {\r\n  const initValues = {\r\n    player: {\r\n      players: [\r\n        {\r\n          name: '熊方',\r\n        },\r\n        {\r\n          name: '蛙方',\r\n        },\r\n      ],\r\n      order: [0, 1],\r\n      local: [0, 1],\r\n      nowPlayer: 0,\r\n    },\r\n    chessBoard: {\r\n      board: createBearFrogBoard(),\r\n      selected: false,\r\n      selectId: -1,\r\n    },\r\n    gameControl: {\r\n    },\r\n  };\r\n  return initValues;\r\n};\r\n\r\nclass SocketContainerClass{\r\n  constructor(){\r\n    this.socketClient = null;\r\n    this.setSocketClient = this.setSocketClient.bind(this);\r\n    this.getSocketClient = this.getSocketClient.bind(this);\r\n  }\r\n  setSocketClient(s) {\r\n    this.socketClient = s;\r\n  }\r\n  getSocketClient () {return this.socketClient}\r\n}\r\n\r\nconst socketContainer = new SocketContainerClass();\r\n\r\nexport { findChessPos, createBearFrogBoard, getInitState, socketContainer };\r\n","import { RESET, UPDATE_SOCKET } from './actionTypes.js';\r\nimport { ChessTypes } from '../constants.js';\r\nimport { getInitState } from '../utils/';\r\n\r\nexport default (state = ChessTypes.NONE, action) => {\r\n  switch (action.type) {\r\n    case RESET: {\r\n      //好像写的不对，也没用上\r\n      console.log('RESET!', getInitState());\r\n      return getInitState();\r\n    }\r\n    case UPDATE_SOCKET: {\r\n      //这个好像，也没用上，这个东西都不放在store里了\r\n      console.log('UPDATE_SOCKET!', action.socketClient);\r\n      const { socketClient } = action;\r\n      return {\r\n        ...state,\r\n        socketClient,\r\n      };\r\n    }\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n","export const SELECT = 'CHESS_BOARD/SELECT';\r\nexport const MOVE_TO = 'CHESS_BOARD/MOVE_TO';\r\nexport const SET_BOARD = 'CHESS_BOARD/SET_BOARD';\r\n","import { SELECT, MOVE_TO, SET_BOARD } from './actionTypes.js';\r\n\r\nexport const select = id => ({\r\n  type: SELECT,\r\n  id,\r\n});\r\n\r\nexport const moveTo = id => ({\r\n  type: MOVE_TO,\r\n  id,\r\n});\r\n\r\nexport const setBoard = board => ({\r\n  type: SET_BOARD,\r\n  board,\r\n});\r\n","// const host = 'http://localhost:3000';\n// const socketPath = '/socket';\n\nexport default class SocketAPI {\n  ws;\n\n  connect(host) {\n    this.ws = new WebSocket(host);\n    this.ws.onclose = (e) => {\n      if (!e.isTrusted)\n        alert('webSocket onClose!' + JSON.stringify(e));\n    };\n    this.ws.onerror = (e) => {\n      alert('webSocket onError!' + e);\n    };\n  }\n\n  disconnect() {\n    this.ws.close(1000, '正常关闭');//待确认，乱写的\n  }\n\n  send(data) {\n    this.ws.send(JSON.stringify(data));\n  }\n\n  setOnMessage(func) {\n    this.ws.onmessage = func;\n  }\n\n  setOnOpen(func) {\n    this.ws.onopen = func;\n  }\n\n  // on(event, fun) {\n  //     // No promise is needed here, but we're expecting one in the middleware.\n  //     return new Promise((resolve, reject) => {\n  //         if (!this.socket) return reject('No socket connection.');\n  //\n  //         this.socket.on(event, fun);\n  //         resolve();\n  //     });\n  // }\n}\n// board棋盘，nowPlayer当前回合人（0/1）， isRoundEnd不懂是啥，needMessage是否需要立刻获取棋盘信息，例如刚上线首次获取棋盘的在线人\nconst gameMessage = (board, nowPlayer, isRoundEnd = false, needMessage = false) => {\n  return {\n    board,\n    nowPlayer,\n    isRoundEnd,\n    needMessage\n  };\n};\n\nexport {gameMessage};\n","import { SET_LOCAL_PLAYER, ROUND_END } from './actionTypes.js';\r\n\r\nexport const setLocalPlayer = (local, nowPlayer) => ({\r\n  type: SET_LOCAL_PLAYER,\r\n  local,\r\n  nowPlayer,\r\n});\r\n\r\nexport const roundEnd = () => ({\r\n  type: ROUND_END,\r\n});\r\n","export const SET_LOCAL_PLAYER = 'PLAYER/PLAY';\r\nexport const ROUND_END = 'PLAYER/ROUND_END';\r\n","import {ChessTypes} from \"../constants\";\r\nimport {findChessPos} from \"./index\";\r\n\r\nexport const flatten = arr => arr.reduce((pre, val) => pre.concat(Array.isArray(val) ? flatten(val) : val), []);\r\n\r\nexport function getNextPosList(board, x, y) {\r\n  const maxX = board.length;\r\n  const maxY = board[0].length;\r\n  const gx = [0, 0, -1, 1];\r\n  const gy = [1, -1, 0, 0];\r\n  const moveList = [];\r\n  for (const i in gx) {\r\n    const x2 = x + gx[i];\r\n    const y2 = y + gy[i];\r\n    // console.log(x, y, gx[i], gy[i], x2, y2, maxX, maxY, typeof(x), typeof(gx[i]));\r\n    if (x2 >= 0 && x2 < maxX && y2 >= 0 && y2 < maxY && board[x2][y2].type === ChessTypes.NONE) {\r\n      moveList.push(board[x2][y2].id);\r\n    }\r\n  }\r\n  return moveList;\r\n}\r\n\r\n\r\nexport const judgeCanBeMoveTo = ({board, selectId, selected}, chessId) => {\r\n  if (!selected) return false;\r\n  const {x, y} = findChessPos(board, selectId);\r\n  const moveList = getNextPosList(board, x, y);\r\n  // console.log(moveList.indexOf(chessId) !== -1);\r\n  return moveList.indexOf(chessId) !== -1;\r\n};\r\n\r\nexport function doKill(board, x, y, player) {\r\n  for (let isHorizon = 0; isHorizon < 2; isHorizon++) {\r\n    let maxX = board.length;\r\n    let maxY = board[0].length;\r\n    if (isHorizon) [maxX, maxY] = [maxY, maxX];\r\n    const ii = isHorizon ? x : y;\r\n\r\n    let allLength = 0,\r\n      maxAllLength = 0;\r\n    let selfLength = 0,\r\n      maxSelfLength = 0,\r\n      selfSize = 0;\r\n    const enemyList = [];\r\n    for (let jj = 0; jj < maxY; jj++) {\r\n      const [i, j] = isHorizon ? [ii, jj] : [jj, ii];\r\n      const now = board[i][j];\r\n      if (now.type != ChessTypes.NONE) {\r\n        allLength++;\r\n        maxAllLength = Math.max(allLength, maxAllLength);\r\n        if (now.player === player) {\r\n          selfLength++;\r\n          maxSelfLength = Math.max(selfLength, maxSelfLength);\r\n          selfSize++;\r\n        } else {\r\n          enemyList.push(now);\r\n          selfLength = 0;\r\n        }\r\n      } else {\r\n        allLength = 0;\r\n        selfLength = 0;\r\n      }\r\n    }\r\n    if (maxAllLength == 3 && maxSelfLength == 2 && selfSize == 2 && enemyList.length == 1) {\r\n      for (let j = 0; j < enemyList.length; j++) {\r\n        enemyList[j].type = ChessTypes.NONE;\r\n        enemyList[j].typeChangeInfo = {reason: \"DIE\"};\r\n        // enemyList[j].player = -1;\r\n        // player不变，因为要用这个player的死亡动画，变了动画也变了，不行\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\n// 从now: {x,y}移动一个棋到x,y，计算kill操作\r\nexport function doMoveAction(board, now, x, y) {\r\n  const newBoard = board.map(row =>\r\n    row.map(item => ({...item})));\r\n  // (now.x,now.y) move to x,y\r\n  const temp = newBoard[now.x][now.y];\r\n  newBoard[now.x][now.y] = newBoard[x][y];\r\n  newBoard[x][y] = temp;\r\n\r\n  newBoard[now.x][now.y].typeChangeInfo = {reason: \"LEAVE\", x, y};\r\n  newBoard[x][y].typeChangeInfo = {reason: \"ARRIVE\", x: now.x, y: now.y};\r\n\r\n  const player = newBoard[x][y].player;\r\n  newBoard[now.x][now.y].player = player; //因为目前的动画会根据棋子的player来画棋子，死亡动画要用到这个空格，所以这里要打个这个补丁。虽然不太合适\r\n  doKill(newBoard, x, y, player);\r\n  return newBoard;\r\n}\r\n\r\n\r\nexport function judgeGameOver(board, player = {\r\n  players: [{name: 'A'}, {name: 'B'}],\r\n  order: [0, 1]\r\n}, orderSequence = [0, 1]) {\r\n  const flatBoard = flatten(board);\r\n\r\n  const playerChessCount = {...orderSequence};\r\n  for (const key in playerChessCount) playerChessCount[key] = 0;\r\n  for (const i in flatBoard) {\r\n    flatBoard[i].type=== ChessTypes.NORMAL && playerChessCount[flatBoard[i].player]++;\r\n  }\r\n\r\n  const {players, order} = player;\r\n  let gameOver = false;\r\n  let winners = [];\r\n  // 判断是否只剩1棋，输掉\r\n  for (const key in playerChessCount) {\r\n    if (playerChessCount[key] <= 1) {\r\n      gameOver = true;\r\n    } else if (players[parseInt(key)]) winners.push(parseInt(key));\r\n  }\r\n  if (!gameOver) {\r\n    // 判断是否无棋可走，输掉\r\n    winners = [];\r\n    const playerCanMoveCount = {...order};\r\n    for (const key in playerCanMoveCount) playerCanMoveCount[key] = {};\r\n    for (let i = 0; i < board.length; i++) {\r\n      for (let j = 0; j < board[i].length; j++) {\r\n        if (board[i][j].type === ChessTypes.NORMAL) {\r\n          const moveList = getNextPosList(board, i, j);\r\n          const player = board[i][j].player;\r\n          moveList.forEach((id) => {\r\n            playerCanMoveCount[player][id] = true;\r\n          });\r\n        }\r\n      }\r\n    }\r\n\r\n    const overs = {};\r\n    for (const key in playerCanMoveCount) {\r\n      if (Object.keys(playerCanMoveCount[key]) <= 0) {\r\n        gameOver = true;\r\n        if (players[parseInt(key)]) overs[key] = true;\r\n      }\r\n    }\r\n    if (gameOver)\r\n      for (const key in playerCanMoveCount) {\r\n        console.log(key, playerCanMoveCount[key], overs[key]);\r\n        if (players[parseInt(key)] && !overs[key]) winners.push(parseInt(key));\r\n      }\r\n    console.log(\"playerCanMoveCount\", board, playerCanMoveCount, overs);\r\n  }\r\n  return {\r\n    gameOver,\r\n    winners\r\n  };\r\n}\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport {connect} from 'react-redux';\r\n// import MdAccessibility from 'react-icons/lib/md/accessibility';\r\nimport {GiBearFace, GiFrogPrince} from 'react-icons/gi'\r\n// import MdAccessible from 'react-icons/lib/md/accessible';\r\n// import MdPets from 'react-icons/lib/md/pets';\r\n// import * as FontAwesome from 'react-icons/lib/fa'\r\nimport {ChessTypes} from '../../constants.js';\r\nimport {findChessPos} from '../../utils';\r\nimport {judgeCanBeMoveTo, getNextPosList} from \"../../utils/boardUtils\";\r\n\r\nconst ChessComponent = (props)=>{\r\n  const {iconClassName, children} = props;\r\n  // return <div className={iconClassName} style={{background: 'red'}}><MdAccessibility className={iconClassName}/>🐻</div>\r\n  return <div className={`${iconClassName}`}>\r\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"100%\" height=\"100%\" viewBox='0 0 512 512'>\r\n        <text x='50%' y=\"50%\" dominantBaseline=\"central\" textAnchor=\"middle\" style={{fontSize: \"256px\"}} >\r\n          {children}\r\n        </text>\r\n    </svg>\r\n    </div>\r\n  ;\r\n}\r\n\r\nclass ChessItem extends React.Component {\r\n  constructor(props, context) {\r\n    super(props, context);\r\n    this.state = {}\r\n  }\r\n\r\n  componentWillReceiveProps(nextProps) {\r\n  }\r\n\r\n  render() {\r\n    const {player, type, beSelected, canBeMoveTo, onSelect, onMoveTo, canBeSelect, typeChangeInfo} = this.props;\r\n    const { playerNames= ['🐻', '🐸'] } = this.props;\r\n    const onClick = () => {\r\n      if (canBeMoveTo) {\r\n        onMoveTo();\r\n      } else if (type != ChessTypes.NONE && canBeSelect) {\r\n        onSelect();\r\n      }\r\n    };\r\n    let iconClassName = `chess-item ${player == 1 ? 'enemy' : ''} `;\r\n    if (type === ChessTypes.NONE) {\r\n      if (typeChangeInfo === \"LEAVE\")\r\n        iconClassName += 'leave ';\r\n      else if (typeChangeInfo === \"DIE\") {\r\n        iconClassName += 'die ';\r\n      } else {\r\n        iconClassName += 'normal-none  ';\r\n      }\r\n    } else {\r\n      if (typeChangeInfo === \"ARRIVE\") {\r\n        iconClassName += 'arrive ';\r\n      } else {\r\n        iconClassName += 'normal-display ';\r\n      }\r\n    }\r\n\r\n    let icon = playerNames[player] || '🐶';\r\n    return (\r\n      <div\r\n        className={`chess-block ${beSelected ? 'selected' : ''} ${canBeMoveTo ? 'can-be-move-to' : ''} ${canBeSelect && !beSelected ? 'can-be-select' : ''} `}\r\n        onClick={onClick}>\r\n        <ChessComponent iconClassName={iconClassName}>{icon}</ChessComponent>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\n// TodoItem.propTypes = {\r\n//   onToggle: PropTypes.func.isRequired,\r\n//   onRemove: PropTypes.func.isRequired,\r\n//   completed: PropTypes.bool.isRequired,\r\n//   text: PropTypes.string.isRequired\r\n// }\r\n\r\n\r\nconst mapStateToProps = (state, {chessId, player, type}) => ({\r\n  beSelected: state.chessBoard.selected && state.chessBoard.selectId == chessId,\r\n  canBeMoveTo: judgeCanBeMoveTo(state.chessBoard, chessId),\r\n  canBeSelect: state.player.nowPlayer === player && state.player.local.indexOf(player) != -1 && type === ChessTypes.NORMAL,\r\n});\r\n\r\nexport default connect(mapStateToProps)(ChessItem);\r\nexport { getNextPosList };\r\n","import {doMoveAction, getNextPosList} from \"../boardUtils\";\r\nimport {ChessTypes} from \"../../constants\";\r\nimport {findChessPos} from \"../index\";\r\n\r\n/**\r\n * Returns a random integer between min (inclusive) and max (inclusive).\r\n * The value is no lower than min (or the next integer greater than min\r\n * if min isn't an integer) and no greater than max (or the next integer\r\n * lower than max if max isn't an integer).\r\n * Using Math.round() will give you a non-uniform distribution!\r\n */\r\nfunction getRandomInt(min, max) {\r\n  min = Math.ceil(min);\r\n  max = Math.floor(max);\r\n  return Math.floor(Math.random() * (max - min + 1)) + min;\r\n}\r\n\r\nconst AI = {\r\n  getTheMove: function (board, player) {\r\n    const moves = [];\r\n    for (let i = 0; i < board.length; i++) {\r\n      for (let j = 0; j < board[i].length; j++) {\r\n        if (board[i][j].type === ChessTypes.NORMAL && board[i][j].player === player) {\r\n          const moveList = getNextPosList(board, i, j);\r\n          moveList.forEach(one => {\r\n            moves.push({now: board[i][j].id, next: one}); //存现在的和next的id\r\n          })\r\n        }\r\n      }\r\n    }\r\n\r\n    const theMove = moves[getRandomInt(0, moves.length - 1)];\r\n    return theMove;\r\n  },\r\n  getNextBoard: (board, player) => {\r\n    //id: 16, player: 1, type: \"有棋\"\r\n    //{id: 25, player: null, type: \"无棋\"}\r\n    console.log(\"AI getNextBoard board?!\", board, player);\r\n\r\n    // const flatBoard = flatten(board);\r\n    // const canMoveChesses = flatBoard.filter(one=>one.player===player);\r\n    const theMove = AI.getTheMove(board, player);\r\n\r\n    let newBoard = board;\r\n    if (theMove) {\r\n      const now = findChessPos(board, theMove.now);\r\n      const next = findChessPos(board, theMove.next);\r\n      console.log(\"getNextBoard theMove\", theMove, now, next);\r\n      newBoard = doMoveAction(board, now, next.x, next.y);\r\n    }\r\n\r\n    return newBoard;\r\n  }\r\n};\r\n\r\nexport default AI;\r\n","// const host = 'http://localhost:3000';\n// const socketPath = '/socket';\n\nimport AI from \"../ai/ai\";\nimport {judgeGameOver} from \"../boardUtils\";\n\nexport default class AIClient {\n  funcs={\n    onMessage: ()=>{},\n    onOpen: ()=>{}\n  }\n  store={\n    timeout: 0\n  }\n  connect(host) {\n    const data = {};\n    // this.funcs.onOpen(data);\n  }\n\n  disconnect() {\n    clearTimeout(this.store.timeout)\n  }\n\n  send(data) {\n    // this.ws.send(JSON.stringify(data));\n    console.log(\"AIClient send\", data);\n    clearTimeout(this.store.timeout);\n    this.store.timeout = setTimeout(()=>{\n      const {nowPlayer, isRoundEnd} = data; // nowPlayer好像经常是null，那边没好好传过来，待修复\n\n      if(judgeGameOver(data.board).gameOver) return; //游戏已经结束的话，就不用计算了\n\n      const realNowPlayer = 1;\n      const newNowPlayer = 0;\n      const resData = {\n        board: AI.getNextBoard(data.board, 1),\n        isRoundEnd: false,\n        needMessage: false,\n        nowPlayer: newNowPlayer\n      };\n      this.funcs.onMessage({data: JSON.stringify(resData)});\n    }, 1000);\n  }\n\n  setOnMessage(func) {\n    // this.ws.onmessage = func;\n    this.funcs.onMessage = func;\n  }\n\n  setOnOpen(func) {\n    // this.ws.onopen = func;\n    this.funcs.onOpen = func;\n  }\n}\n","import React, {Component} from 'react';\r\nimport {connect} from 'react-redux';\r\nimport './style.css';\r\nimport {Link, Switch, Route} from 'react-router-dom';\r\nimport {setBoard} from '../../chessBoard/actions.js';\r\nimport {reset, updateSocket} from '../actions.js';\r\nimport SocketClient, {gameMessage} from '../../utils/controlClients/SocketClient';\r\nimport {roundEnd, setLocalPlayer} from '../../player/actions';\r\nimport {moveTo} from '../../chessBoard/actions';\r\nimport {socketContainer} from '../../utils';\r\nimport {getNextPosList} from '../../chessBoard/views/chessItem';\r\nimport {ChessTypes} from '../../constants';\r\nimport AIClient from \"../../utils/controlClients/AIClient\";\r\nimport {flatten, judgeGameOver} from \"../../utils/boardUtils\";\r\n\r\nclass PlayControl extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    console.log('PlayControl　constructor', props);\r\n    const {roomId, vsAI, player} = props;\r\n    this.props.setBoard();\r\n    if (props.roomId || vsAI) {\r\n      this.props.setLocalPlayer([parseInt(props.player)]);\r\n\r\n      const host = process.env.REACT_APP_WS_HOST + props.roomId;\r\n      const GameClient = vsAI ? AIClient : SocketClient;\r\n      const socketClient = new GameClient();\r\n      socketClient.connect(host);\r\n      socketClient.setOnOpen(() => {\r\n        socketClient.send(gameMessage(null, null, null, true));\r\n      });\r\n      socketClient.setOnMessage((event) => {\r\n        console.log(event, event.data, JSON.parse(event.data));\r\n        // alert(event.data);\r\n        const data = JSON.parse(event.data);\r\n        if (data.needMessage) {\r\n          const {board, nowPlayer, gameOver} = this.props;\r\n          if (!gameOver) socketClient.send(gameMessage(board, nowPlayer, false));\r\n        } else {\r\n          props.onReceiveBoard(data);\r\n        }\r\n      });\r\n      socketContainer.setSocketClient(socketClient);\r\n    } else {\r\n      this.props.setLocalPlayer([0, 1]);\r\n      if (socketContainer.getSocketClient()) {\r\n        socketContainer.getSocketClient().disconnect();\r\n        socketContainer.setSocketClient(null);\r\n      }\r\n    }\r\n  }\r\n\r\n  componentWillReceiveProps(nextProps) {\r\n    const {gameOver: preGameOver} = this.props;\r\n    const {gameOver, winners} = nextProps;\r\n    console.log('judge gameOver! ', this.props, gameOver, preGameOver);\r\n    if (gameOver && !preGameOver) {\r\n      // 延迟gameOver弹框，防止看不到最后一步。不过没有立即禁止操作，可能要再优化下\r\n      setTimeout(() => {\r\n        alert(`游戏结束！胜者是${this.getPlayerNames()[winners]}`);\r\n        // window.location.reload();\r\n        nextProps.resetAll();\r\n      }, 1000);\r\n    }\r\n  }\r\n\r\n  componentWillUnmount(): void {\r\n    if (socketContainer.getSocketClient()) {\r\n      socketContainer.getSocketClient().disconnect();\r\n      socketContainer.setSocketClient(null);\r\n    }\r\n  }\r\n\r\n  getPlayerNames() {\r\n    const {params} = this.props;\r\n    let playerNames = ['🐻', '🐸'];\r\n    if (params.playerNames) {\r\n      playerNames = JSON.parse(params.playerNames);\r\n    }\r\n    return playerNames\r\n  }\r\n\r\n  render() {\r\n    const {\r\n      ChessBoard, player, gameOver, roomId, params\r\n    } = this.props;\r\n\r\n\r\n    return (\r\n      <div className=\"full-window\">\r\n        <div className=\"inner-window\">\r\n          {roomId ? <div>房间{roomId}</div> : ''}\r\n          <div><ChessBoard playerNames={this.getPlayerNames()}/></div>\r\n          <div>{player}</div>\r\n          <div>规则：本回合移动的己方棋子和其移动后相邻的棋子，两个棋子组成炮台，杀死处在该炮台连线上相邻的敌方棋子。如果这条直线上有4个棋子则杀不掉。当有玩家只剩1颗棋子或者无法行动时输掉。</div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\n\r\nconst mapStateToProps = (state) => {\r\n  const board = state.chessBoard.board;\r\n\r\n  const {gameOver, winners} = judgeGameOver(board, state.player, state.player.order);\r\n  // console.log(flatBoard, gameOver);\r\n  return {\r\n    gameOver,\r\n    winners: gameOver ? winners : [],\r\n    board,\r\n    nowPlayer: state.player.nowPlayer,\r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n  setLocalPlayer: (local) => {\r\n    dispatch(setLocalPlayer(local));\r\n  },\r\n  setNowPlayer: (nowPlayer) => {\r\n    dispatch(setLocalPlayer(null, nowPlayer));\r\n  },\r\n  setBoard: (board) => {\r\n    dispatch(setBoard(board));\r\n  },\r\n  resetAll: () => {\r\n    dispatch(setBoard());\r\n  },\r\n  onReceiveBoard: (data) => {\r\n    const {board, nowPlayer, isRoundEnd} = data;\r\n    console.log('will dispatch, board=', board, nowPlayer, isRoundEnd);\r\n    dispatch(setBoard(board));\r\n    if (nowPlayer || nowPlayer === 0) dispatch(setLocalPlayer(null, nowPlayer));\r\n    if (isRoundEnd) dispatch(roundEnd());\r\n  },\r\n});\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(PlayControl);\r\n","import React, {Component} from 'react';\r\nimport {Link, Switch, Route} from 'react-router-dom';\r\n\r\nimport \"./menuPage.scss\";\r\nimport Button from '@material-ui/core/Button';\r\n\r\nconst buttonList = [\r\n  {title: '单挑AI', url: '/local-ai/1/0'},\r\n  {title: '本地双人', url: '/local'},\r\n  // {title: '在线双人-南位', url: '/online/123/0'},\r\n  // {title: '在线双人-北位', url: '/online/123/1'},\r\n  {\r\n    title: '网络对战', urlFunc: () => {\r\n      const randomNumber = Math.floor(Math.random() * 1000000 + 1);\r\n      return `/room/${randomNumber}`\r\n    }\r\n  },\r\n];\r\n\r\nconst menuPage = (props) => (<div className=\"menu-page\">\r\n  <div className={\"title-field\"}>\r\n    <div className=\"page-title\">\r\n      熊蛙棋\r\n    </div>\r\n  </div>\r\n  <div className=\"right-field\">\r\n    <div className=\"page-select-list\">\r\n      {buttonList.map(buttonData => {\r\n        const {title, url, urlFunc} = buttonData;\r\n        return <div>\r\n          <Button\r\n            raised className=\"mdc-button my-button\" onClick={() => {\r\n            if (urlFunc) props.history.push(urlFunc());\r\n            else props.history.push(url);\r\n          }}>\r\n            {title}\r\n          </Button></div>\r\n      })}\r\n    </div>\r\n  </div>\r\n  {/* <div><Link to=\"/\">主菜单</Link></div> */}\r\n</div>);\r\n\r\nexport default menuPage;\r\n","import React, {Component} from 'react';\r\nimport {Link, Switch, Route} from 'react-router-dom';\r\n\r\nimport \"./RoomMenu.scss\";\r\nimport Button from '@material-ui/core/Button';\r\nimport {CopyToClipboard} from \"react-copy-to-clipboard\";\r\n\r\nconst buttonList = [\r\n  {title: '玩家1进入', urlFunc: (roomId, playerId) => `/online/${roomId}/${playerId}`},\r\n  {title: '玩家2进入', urlFunc: (roomId, playerId) => `/online/${roomId}/${playerId}`},\r\n];\r\n\r\nconst OnePlayerPanel = (props) => {\r\n  const {playerName, url} = props;\r\n  return <div className='one-player-panel'>\r\n    <div>{playerName}</div>\r\n    <div>\r\n      <input className='my-input' value={url} readOnly={true}/>\r\n      <CopyToClipboard text={url}\r\n                       onCopy={() => {\r\n                       }}>\r\n        <button className='copy-button' onClick={() => {\r\n        }}>复制网址\r\n        </button>\r\n      </CopyToClipboard>\r\n    </div>\r\n    <Button\r\n      raised className=\"enter-button\" onClick={() => {\r\n      props.onJump && props.onJump();\r\n    }}>{`进入${playerName}座位`}</Button>\r\n  </div>\r\n};\r\n\r\nconst RoomMenu = (props) => {\r\n  const {history, roomId} = props;\r\n  const {host, href, pathname} = window.location;\r\n  console.log(\"location!\", props.location, window.location);\r\n  const urlPrefix = href.split('#')[0];\r\n  return (<div className=\"menu-page\">\r\n    <div className={\"title-field\"}>\r\n      <div className=\"page-info\">\r\n        网络1V1对战：把一个座位的网址发给朋友，自己进入另一个座位网址。\r\n      </div>\r\n      <div><Button outlined className=\"back-button\" onClick={() => {\r\n        props.history.push(`/`);\r\n      }}>返回主菜单</Button></div>\r\n    </div>\r\n    <div className=\"right-field\">\r\n      <div className=\"player-copy-field\">\r\n        <OnePlayerPanel playerName={\"玩家1\"} url={`${urlPrefix}#/online/${roomId}/${0}`} onJump={() => {\r\n          props.history.push(`/online/${roomId}/${0}`);\r\n        }}/>\r\n        <OnePlayerPanel playerName={\"玩家2\"} url={`${urlPrefix}#/online/${roomId}/${1}`} onJump={() => {\r\n          props.history.push(`/online/${roomId}/${1}`);\r\n        }}/>\r\n      </div>\r\n    </div>\r\n  </div>);\r\n}\r\n\r\nexport default RoomMenu;\r\n","/**\r\n * Created by yuiff on 2018/4/1.\r\n */\r\nimport React, {Component} from 'react';\r\nimport {connect} from 'react-redux';\r\nimport './style.css';\r\nimport {Link, Switch, Route} from 'react-router-dom';\r\nimport PlayControl from './gamePlaying.js';\r\nimport menuPage from \"../../menu/menuPage\";\r\nimport RoomMenu from \"../../menu/RoomMenu\";\r\nimport qs from \"qs\";\r\n\r\nclass RouteControl extends Component {\r\n  render() {\r\n    const {chessBoard, player, gameOver} = this.props;\r\n    const playControl = ({match, location, ...others}) => {\r\n      console.log(\"playControl\", match, others, this.props);\r\n      const params = qs.parse(location.search, { ignoreQueryPrefix: true });\r\n      return <PlayControl {...this.props} roomId={match.params.roomId}\r\n                   player={match.params.playerId} vsAI={match.params.hasAI} params={params}/>;\r\n    }\r\n    const roomControl = (props) => {\r\n      const {match} = props;\r\n      return <RoomMenu {...props} roomId={match.params.roomId}/>\r\n    };\r\n    return (\r\n      <div className=\"full-window\">\r\n        <div className=\"inner-window\">\r\n          <Switch>\r\n            <Route path=\"/local\" component={playControl}/>\r\n            <Route path=\"/local-ai/:hasAI/:playerId\" component={playControl} />\r\n            <Route path=\"/online/:roomId/:playerId\" component={playControl}/>\r\n            <Route exact path=\"/\" component={menuPage}/>\r\n            <Route path=\"/room/:roomId\" component={roomControl}/>\r\n          </Switch>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\n\r\nconst mapStateToProps = state => ({});\r\n\r\n\r\nexport default connect(mapStateToProps)(RouteControl);\r\n","import {SELECT, MOVE_TO, SET_BOARD} from './actionTypes.js';\r\nimport {findChessPos, socketContainer} from '../utils';\r\nimport {ChessTypes} from '../constants.js';\r\nimport {createBearFrogBoard} from '../utils/';\r\nimport {gameMessage} from '../utils/controlClients/SocketClient';\r\nimport {doMoveAction} from \"../utils/boardUtils\";\r\n\r\nexport default (state = {}, action) => {\r\n  switch (action.type) {\r\n    case SELECT: {\r\n      console.log(action);\r\n      return {\r\n        ...state,\r\n        selected: true,\r\n        selectId: action.id,\r\n      };\r\n    }\r\n    case MOVE_TO: {\r\n      const now = findChessPos(state.board, state.selectId);\r\n      const {x, y} = findChessPos(state.board, action.id);\r\n      const board = state.board;\r\n      console.log(now.x, now.y, x, y, state.selectId, action.id, state.board);\r\n      const newBoard = doMoveAction(board, now, x, y);\r\n      if (socketContainer.getSocketClient()) {\r\n        socketContainer.getSocketClient()\r\n          .send(gameMessage(newBoard, null, true));\r\n      }\r\n      return {\r\n        ...state,\r\n        board: newBoard,\r\n        selected: false,\r\n      };\r\n    }\r\n    case SELECT: {\r\n      return state.filter(todoItem => todoItem.id !== action.id);\r\n    }\r\n    case SET_BOARD: {\r\n      console.log('SET_BOARD!REDUCER, got action:', action);\r\n      let newBoard = action.board;\r\n      if(!newBoard){\r\n        newBoard = createBearFrogBoard();\r\n        // 如果打AI的话，要这样发新的棋盘给AI让它动一下，否则会两边都没法动。这个临时在这加着，应该有更好的实现方式。\r\n        if (socketContainer.getSocketClient()) {\r\n          socketContainer.getSocketClient()\r\n            .send(gameMessage(newBoard, null, true));\r\n        }\r\n      }\r\n      return {\r\n        ...state,\r\n        board: newBoard,\r\n      };\r\n    }\r\n    default: {\r\n      return state;\r\n    }\r\n  }\r\n};\r\n","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { select, moveTo } from '../actions.js';\r\nimport { roundEnd } from '../../player/actions';\r\nimport ChessItem from './chessItem.js';\r\n\r\nimport './style.scss';\r\n\r\nconst ChessBoard = ({ board, onSelect, onMoveTo, playerNames }) => {\r\n  let rowKey = 0;\r\n\r\n  return (\r\n    <div className=\"chess-board\">\r\n      {\r\n                board.map(row => (\r\n                  <div className=\"row\" key={rowKey++}>\r\n                    {row.map((item, index) => (\r\n                      <ChessItem\r\n                        key={index}\r\n                        chessId={item.id}\r\n                        player={item.player}\r\n                        playerNames={playerNames}\r\n                        type={item.type}\r\n                        onSelect={() => onSelect(item.id)}\r\n                        onMoveTo={() => onMoveTo(item.id)}\r\n                      />\r\n                        ))}\r\n                  </div>\r\n                ))\r\n            }\r\n    </div>\r\n  );\r\n};\r\n\r\n\r\nconst mapStateToProps = state => ({\r\n  board: state.chessBoard.board,\r\n});\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n  onSelect: (id) => {\r\n    dispatch(select(id));\r\n  },\r\n  onMoveTo: (id) => {\r\n    dispatch(moveTo(id));\r\n    dispatch(roundEnd());\r\n  },\r\n});\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(ChessBoard);\r\n\r\n","import { SET_LOCAL_PLAYER, ROUND_END } from './actionTypes.js';\r\n\r\n\r\nexport default (state = {}, action) => {\r\n  switch (action.type) {\r\n    case ROUND_END: {\r\n      const newState = {\r\n        ...state,\r\n        nowPlayer: state.order[(state.order.indexOf(state.nowPlayer) + 1) % state.order.length],\r\n      };\r\n      return newState;\r\n    }\r\n    case SET_LOCAL_PLAYER: {\r\n      const nextState = {\r\n        ...state,\r\n        nowPlayer: action.nowPlayer ? action.nowPlayer : 0,\r\n      };\r\n      if (action.local) { nextState.local = action.local; }\r\n      return nextState;\r\n    }\r\n    default: {\r\n      return state;\r\n    }\r\n  }\r\n};\r\n","import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport PropTypes from 'prop-types';\r\nimport { setLocalPlayer } from '../actions.js';\r\nimport CardItem from './cardItem.js';\r\n\r\nclass PlayerZone extends Component {\r\n  constructor(props, context) {\r\n    super(props, context);\r\n    this.render = this.render.bind(this);\r\n    this.state = {};\r\n  }\r\n\r\n  componentDidUpdate(preProps) {\r\n    const isNowPlayer = this.props.isNowPlayer;\r\n    const onRemoveCard = this.props.onRemoveCard;\r\n    const isComputer = this.props.isComputer;\r\n    const player = this.props.player;\r\n    const cards = this.props.cards;\r\n    const nowPlayer = this.props.nowPlayer;\r\n    const life = this.props.life;\r\n    console.log('AI', isNowPlayer, isComputer, player, nowPlayer);\r\n    if (isNowPlayer && isComputer && life > 0) {\r\n      const length = cards.length;\r\n      const selectCardIndex = Math.floor(Math.random() * length);\r\n      const selectCardId = cards[selectCardIndex].id;\r\n      onRemoveCard(selectCardId, player);\r\n    }\r\n  }\r\n\r\n  render() {\r\n    // const cards = this.props.cards;\r\n    const player = this.props.player;\r\n    const life = this.props.life;\r\n    const onRemoveCard = this.props.onRemoveCard;\r\n    const noCard = this.props.noCard;\r\n    const isComputer = this.props.isComputer;\r\n    if (noCard && !isComputer) {\r\n      let str = `出完了！你还剩${life}星星，`;\r\n      if (life === 3) str += '能够全身而退，无敌。';\r\n      else if (life < 3) str += '不足3颗，完蛋了。';\r\n      else str += '赚到。';\r\n      alert(str);\r\n      if (life >= 3) window.location.href = 'http://www.yuiffy.com/hebi.html';\r\n      else window.location.href = 'http://www.yuiffy.com/mario.html';\r\n    }\r\n    return (\r\n      <div className=\"playerZone\">\r\n        {\r\n                    life <= 0 ?\r\n                      <div className=\"dead\">\r\n                            死了。\r\n                      </div>\r\n                        :\r\n                        // life!==0\r\n                      <div>\r\n                        {player}\r\n                        {/* <div className=\"cardZone\"> */}\r\n                        {/* { */}\r\n                        {/* cards.map((item) => ( */}\r\n                        {/* <CardItem */}\r\n                        {/* key={item.id} */}\r\n                        {/* type={item.type} */}\r\n                        {/* player={player} */}\r\n                        {/* onRemove={() => onRemoveCard(item.id, player)} */}\r\n                        {/* /> */}\r\n                        {/* )) */}\r\n                        {/* } */}\r\n                        {/* </div> */}\r\n                        <div className=\"lifeZone\">\r\n                          {\r\n                                    Array.from(Array(life), () => '★').map(item => (\r\n                                      <span>{item}</span>\r\n                                    ))\r\n                                }\r\n                        </div>\r\n                      </div>\r\n                }\r\n\r\n\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nPlayerZone.propTypes = {\r\n  cards: PropTypes.array.isRequired,\r\n  life: PropTypes.number.isRequired,\r\n};\r\n\r\nconst mapStateToProps = (state, ownProps) => ({\r\n  cards: state.player.players[ownProps.player].cards,\r\n  life: state.player.players[ownProps.player].life,\r\n  noCard: false,\r\n  isComputer: state.player.players[ownProps.player].isComputer,\r\n  isNowPlayer: state.player.nowPlayer === ownProps.player,\r\n  nowPlayer: state.player.nowPlayer,\r\n});\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n  onRemoveCard: (id, player) => {\r\n    dispatch(setLocalPlayer(id, player));\r\n  },\r\n});\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(PlayerZone);\r\n\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { connect } from 'react-redux';\r\nimport { playCard } from '../actions.js';\r\n\r\nconst CardItem = ({\r\n  type, active, isShow, onRemove,\r\n}) => {\r\n  let typeShow = '';\r\n  switch (type) {\r\n    case 0:\r\n      typeShow = '石头';\r\n      break;\r\n    case 1:\r\n      typeShow = '剪刀';\r\n      break;\r\n    case 2:\r\n      typeShow = '布';\r\n      break;\r\n  }\r\n  return (\r\n    <div\r\n      className=\"card\"\r\n      onClick={active ? onRemove : null}\r\n      style={{\r\n                 backgroundColor: active ? 'yellow' : 'white',\r\n             }}\r\n    >\r\n      {active || isShow ? typeShow : ''}\r\n    </div>\r\n  );\r\n};\r\n\r\n\r\nCardItem.propTypes = {\r\n  type: PropTypes.string.isRequired,\r\n  active: PropTypes.bool.isRequired,\r\n  isShow: PropTypes.bool,\r\n  onClick: PropTypes.func.isRequired,\r\n};\r\n\r\nconst mapStateToProps = (state, ownProps) => ({\r\n  active: state.game.nowPlayer === ownProps.player && state.game.players[ownProps.player].cardPlayed.length === 0,\r\n});\r\n\r\n\r\nexport default connect(mapStateToProps)(CardItem);\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { connect } from 'react-redux';\r\n// import {bindActionCreators} from 'redux';\r\nimport CardItem from './cardItem.js';\r\nimport { playCard, showHand, roundEnd } from '../actions.js';\r\n// import {FilterTypes} from '../../constants.js';\r\n\r\nconst PublicZone = ({ nowPlayerName, roundEnd }) => (\r\n  <div className=\"\" onClick={roundEnd}>\r\n            现在轮到{nowPlayerName}行动\r\n  </div>\r\n);\r\n\r\nconst mapStateToProps = state => ({\r\n  nowPlayerName: state.player.players[state.player.nowPlayer].name,\r\n});\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n  roundEnd: () => {\r\n    dispatch(roundEnd());\r\n  },\r\n});\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(PublicZone);\r\n\r\n","import React from 'react';\r\nimport PlayerZone from './playerZone.js';\r\nimport PublicZone from './publicZone.js';\r\n\r\nimport './style.css';\r\n\r\nexport default () => (\r\n  <div className=\"\">\r\n    <PublicZone />\r\n  </div>\r\n);\r\n\r\n","import React from 'react';\r\nimport { view as GameControl } from './gameControl/';\r\nimport { view as ChessBoard } from './chessBoard/';\r\nimport { view as Player } from './player/';\r\nimport { Link, Route, Switch } from 'react-router-dom';\r\n\r\nfunction App() {\r\n  const chessBoard = ChessBoard;\r\n  const player = <Player />;\r\n  return (\r\n    <GameControl ChessBoard={chessBoard} player={player} />\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import { createStore, combineReducers, applyMiddleware, compose } from 'redux';\r\n\r\nimport { reducer as playerReducer } from './player';\r\nimport { reducer as chessBoardReducer } from './chessBoard';\r\nimport { reducer as gameControlReducer } from './gameControl';\r\nimport { getInitState } from './utils/';\r\n\r\nconst win = window;\r\n\r\nconst reducer = combineReducers({\r\n  player: playerReducer,\r\n  chessBoard: chessBoardReducer,\r\n  gameControl: gameControlReducer,\r\n});\r\n\r\n\r\nconst middlewares = [];\r\nif (process.env.NODE_ENV !== 'production') {\r\n  middlewares.push(require('redux-immutable-state-invariant').default());\r\n}\r\n\r\nconst storeEnhancers = compose(\r\n  applyMiddleware(...middlewares),\r\n  (win && win.devToolsExtension) ? win.devToolsExtension() : f => f,\r\n);\r\n\r\nexport default createStore(reducer, getInitState(), storeEnhancers);\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport { Provider } from 'react-redux';\r\nimport App from './App';\r\nimport { HashRouter as BrowserRouter } from 'react-router-dom';\r\n\r\nimport store from './Store.js';\r\n\r\nReactDOM.render(\r\n  <Provider store={store}>\r\n    <BrowserRouter>\r\n      <App />\r\n    </BrowserRouter>\r\n  </Provider>,\r\n  document.getElementById('root'),\r\n);\r\n"],"sourceRoot":""}